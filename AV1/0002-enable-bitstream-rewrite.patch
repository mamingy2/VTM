From dad83c1a2fe0ededd6b2ef0f044d9da04b19a4e8 Mon Sep 17 00:00:00 2001
From: "Ma, Mingyang" <mingyang.ma@intel.com>
Date: Thu, 18 Aug 2022 15:04:46 +0800
Subject: [PATCH 2/2] enable bitstream rewrite

---
 av1/encoder/bitstream.c    | 101 ++++++++++++++++++++++++++++++++++++-
 examples/svc_encoder_rtc.c |  20 ++++----
 2 files changed, 110 insertions(+), 11 deletions(-)

diff --git a/av1/encoder/bitstream.c b/av1/encoder/bitstream.c
index 6e4af8188..470292d69 100644
--- a/av1/encoder/bitstream.c
+++ b/av1/encoder/bitstream.c
@@ -1703,6 +1703,100 @@ static AOM_INLINE void write_modes_sb(
   // update partition context
   update_ext_partition_context(xd, mi_row, mi_col, subsize, bsize, partition);
 }
+#define DEBUG printf
+
+static AOM_INLINE void rewrite_skip(MACROBLOCKD *const xd,  aom_writer *const w, int has_left, int has_above) {
+  const int skip_txfm = 1;
+  const int ctx =  has_left + has_above;
+  FRAME_CONTEXT *ec_ctx = xd->tile_ctx;
+  DEBUG("skip ctx = %d\r\n", ctx);
+  aom_write_symbol(w, skip_txfm, ec_ctx->skip_txfm_cdfs[ctx], 2);
+}
+
+static AOM_INLINE void rewrite_is_inter(aom_writer *w, FRAME_CONTEXT *ec_ctx) {
+  DEBUG("is_inter = %d\r\n", 0);
+  aom_write_symbol(w, 1, ec_ctx->intra_inter_cdf[0], 2);
+}
+
+// This function encodes the reference frame
+static AOM_INLINE void rewrite_ref_frames(aom_writer *w, FRAME_CONTEXT *ec_ctx, int has_left, int has_above) {
+
+  int ctx;
+  ctx = (has_left || has_above) ? 2 : 1;
+  DEBUG("single_ref_p1 ctx = %d\r\n", ctx);
+  DEBUG("single_ref_p3 ctx = %d\r\n", ctx);
+  DEBUG("single_ref_p4 ctx = %d\r\n", ctx);
+  //p1
+  aom_write_symbol(w, 0, ec_ctx->single_ref_cdf[ctx][0], 2);
+
+  //p3
+  aom_write_symbol(w, 0, ec_ctx->single_ref_cdf[ctx][2], 2);
+
+  //p4
+  aom_write_symbol(w, 0, ec_ctx->single_ref_cdf[ctx][3], 2);
+}
+
+static AOM_INLINE void rewrite_inter_mode(aom_writer *w, FRAME_CONTEXT *ec_ctx, int has_left, int has_above){
+
+    int newmv_ctx = 0;
+    int refmv_ctx = 0;
+    int closed_matches = has_left + has_above;
+    if (closed_matches == 1) {
+      newmv_ctx = refmv_ctx = 3;
+    } else if (closed_matches != 0) {
+      newmv_ctx = refmv_ctx = 5;
+    }
+
+    DEBUG("new_mv ctx = %d\r\n", newmv_ctx);
+
+    aom_write_symbol(w, 1, ec_ctx->newmv_cdf[newmv_ctx], 2);
+
+    int zeromv_ctx = 0;
+
+    DEBUG("zero_mv ctx = %d\r\n", zeromv_ctx);
+    aom_write_symbol(w, 1, ec_ctx->zeromv_cdf[zeromv_ctx], 2);
+
+
+    DEBUG("ref_mv ctx = %d\r\n", refmv_ctx);
+    aom_write_symbol(w, 0, ec_ctx->refmv_cdf[refmv_ctx], 2);
+
+}
+
+static AOM_INLINE void rewrite_use_obmc(aom_writer *w, FRAME_CONTEXT *ec_ctx, BLOCK_SIZE bsize, int has_left, int has_above) {
+
+    if (has_left || has_above) {
+        DEBUG("obmc ctx = %d\r\n", bsize);
+        aom_write_symbol(w, 0, ec_ctx->obmc_cdf[bsize], 2);
+    }
+}
+
+static AOM_INLINE void rewrite_modes_sb(
+    AV1_COMP *const cpi, ThreadData *const td, const TileInfo *const tile,
+    aom_writer *const w, const TokenExtra **tok,
+    const TokenExtra *const tok_end, int mi_row, int mi_col, BLOCK_SIZE bsize) {
+  const AV1_COMMON *const cm = &cpi->common;
+  const CommonModeInfoParams *const mi_params = &cm->mi_params;
+  MACROBLOCKD *const xd = &td->mb.e_mbd;
+  const MB_MODE_INFO *const mbmi = xd->mi[0];
+  const int hbs = mi_size_wide[bsize] / 2;
+  const PARTITION_TYPE partition = PARTITION_NONE;
+  int has_left  = mi_col > tile->mi_col_start;
+  int has_above = mi_row > tile->mi_row_start;
+  DEBUG("+sb\r\n");
+  const BLOCK_SIZE subsize = get_partition_subsize(bsize, partition);
+  write_partition(cm, xd, hbs, mi_row, mi_col, partition, bsize, w);
+
+  rewrite_skip(xd, w, has_left, has_above);
+  rewrite_is_inter(w, xd->tile_ctx);
+  rewrite_ref_frames(w, xd->tile_ctx, has_left, has_above);
+  rewrite_inter_mode(w, xd->tile_ctx, has_left, has_above);
+  rewrite_use_obmc(w, xd->tile_ctx, bsize, has_left, has_above);
+  DEBUG("-sb\r\n");
+
+  // update partition context
+  update_ext_partition_context(xd, mi_row, mi_col, subsize, bsize, partition);
+
+}
 
 // Populate token pointers appropriately based on token_info.
 static AOM_INLINE void get_token_pointers(const TokenInfo *token_info,
@@ -1757,8 +1851,13 @@ static AOM_INLINE void write_modes(AV1_COMP *const cpi, ThreadData *const td,
     for (int mi_col = mi_col_start; mi_col < mi_col_end;
          mi_col += cm->seq_params->mib_size) {
       td->mb.cb_coef_buff = av1_get_cb_coeff_buffer(cpi, mi_row, mi_col);
-      write_modes_sb(cpi, td, tile, w, &tok, tok_end, mi_row, mi_col,
+      if (cm->spatial_layer_id == 1 && tile->tile_row == 1 && tile->tile_col == 0) {
+        rewrite_modes_sb(cpi, td, tile, w, &tok, tok_end, mi_row, mi_col,
                      cm->seq_params->sb_size);
+      } else {
+        write_modes_sb(cpi, td, tile, w, &tok, tok_end, mi_row, mi_col,
+                      cm->seq_params->sb_size);
+      };
     }
     assert(tok == tok_end);
   }
diff --git a/examples/svc_encoder_rtc.c b/examples/svc_encoder_rtc.c
index 563b674e6..842bb34dc 100644
--- a/examples/svc_encoder_rtc.c
+++ b/examples/svc_encoder_rtc.c
@@ -1294,7 +1294,7 @@ int main(int argc, const char **argv) {
   }
   if (ss_number_layers == 2) {
     svc_params.scaling_factor_num[0] = 1;
-    svc_params.scaling_factor_den[0] = 2;
+    svc_params.scaling_factor_den[0] = 4;
   } else if (ss_number_layers == 3) {
     svc_params.scaling_factor_num[0] = 1;
     svc_params.scaling_factor_den[0] = 4;
@@ -1404,13 +1404,13 @@ int main(int argc, const char **argv) {
               for (unsigned tl = layer_id.temporal_layer_id;
                    tl < ts_number_layers; ++tl) {
                 unsigned int j = sl * ts_number_layers + tl;
-                if (app_input.output_obu) {
-                  fwrite(pkt->data.frame.buf, 1, pkt->data.frame.sz,
-                         obu_files[j]);
-                } else {
-                  aom_video_writer_write_frame(outfile[j], pkt->data.frame.buf,
-                                               pkt->data.frame.sz, pts);
-                }
+                // if (app_input.output_obu) {
+                //   fwrite(pkt->data.frame.buf, 1, pkt->data.frame.sz,
+                //          obu_files[j]);
+                // } else {
+                //   aom_video_writer_write_frame(outfile[j], pkt->data.frame.buf,
+                //                                pkt->data.frame.sz, pts);
+                // }
                 if (sl == (unsigned int)layer_id.spatial_layer_id)
                   rc.layer_encoding_bitrate[j] += 8.0 * pkt->data.frame.sz;
               }
@@ -1466,7 +1466,7 @@ int main(int argc, const char **argv) {
               }
             }
 
-#if CONFIG_AV1_DECODER
+#if CONFIG_AV1_DECODER1
             if (aom_codec_decode(&decoder, pkt->data.frame.buf,
                                  (unsigned int)pkt->data.frame.sz, NULL))
               die_codec(&decoder, "Failed to decode frame.");
@@ -1476,7 +1476,7 @@ int main(int argc, const char **argv) {
           default: break;
         }
       }
-#if CONFIG_AV1_DECODER
+#if CONFIG_AV1_DECODER1
       // Don't look for mismatch on top spatial and top temporal layers as they
       // are non reference frames.
       if ((ss_number_layers > 1 || ts_number_layers > 1) &&
-- 
2.25.1

